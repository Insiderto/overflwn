name: Publish Package to NPM

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., patch, minor, major, or specific version)'
        required: true
        default: 'patch'
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Version and publish (auto)
        if: github.event_name == 'release'
        run: |
          # Extract version from release tag
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          
          # Update package version
          npm version $VERSION --no-git-tag-version
          
          # Build the package
          npm run build
          
          # Publish to NPM
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      
      - name: Version and publish (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Update package version
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Build the package
          npm run build
          
          # Publish to NPM
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      
      - name: Create or update git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          NEW_VERSION=v$(node -p "require('./package.json').version")
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f $NEW_VERSION
          git push origin $NEW_VERSION -f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
